#include <windows.h>
#include <iostream>
#include <tchar.h>
#include <array>
#include <stdio.h>
#include <stdlib.h> 

using namespace std;


/*создание процесса, в котором создаются потоки*/
void SimpleThread()
{
    cout << "lala" << endl;
}

int main(int argc, TCHAR* argv[])
{
    STARTUPINFO si;
    PROCESS_INFORMATION pi;

    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

   // HANDLE hThread1 = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)SimpleThread, &a, NULL, NULL);

    // Start the child process. 
    if (!CreateProcessW(NULL,   // No module name (use command line)
        NULL,        // Command line 
        NULL,           // Process handle not inheritable
        NULL,           // Thread handle not inheritable
        TRUE,          // Set handle inheritance to FALSE
        0,              // No creation flags
        NULL,           // Use parent's environment block
        NULL,           // Use parent's starting directory 
        &si,            // Pointer to STARTUPINFO structure
        &pi)           // Pointer to PROCESS_INFORMATION structure
        )
    {
        printf("CreateProcess failed (%d).\n", GetLastError());
        return 1;
    }

    //  for (int i = 0; i <= 10; ++i) 
    //{
    //     CreateThread(NULL, 0, thread2, i, 0, NULL);
    //}

   



    // Wait until child process exits.
    WaitForSingleObject(pi.hProcess, INFINITE);

    // Close process and thread handles. 
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
    
    return 0;
}