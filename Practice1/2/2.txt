#include <Windows.h>
#include <malloc.h>
#include <string.h>
#include <tchar.h>
#include <cstdlib>
#include <iostream>
#include <string>
#include <string.h>
#include <stdio.h>
using namespace std;
#if defined(_UNICODE)
#define _T(x) L##x
#else
#define _T(x) x
#endif
#define _CRT_SECURE_NO_WARNINGS

#define BUFFER_SIZE 256
#define DIRECTORY_NAME _T("C:\\Users\\Constantine\\Desktop\\Education\\Practice1\\2\\Test_2\\")

int wmain(int argc, wchar_t* argv[]) {
	setlocale(LC_ALL, "Russian");
	WIN32_FIND_DATAW wfd;

	HANDLE directory_handle = FindFirstFile(DIRECTORY_NAME _T("*"), &wfd);
	if (directory_handle == INVALID_HANDLE_VALUE) {
		return 0;
		FindClose(directory_handle);
		exit(0);

	}

	int empty_files_counter = 1;
	do {
		if (wfd.dwFileAttributes != FILE_ATTRIBUTE_DIRECTORY)
		{
			if ((wcscmp(wfd.cFileName, L".") != 0) && (wcscmp(wfd.cFileName, L"..") != 0))
			{
				TCHAR file_name[BUFFER_SIZE] = _T("");
				_tcscpy_s(file_name, DIRECTORY_NAME); //копирует в file_name
					 //слияние строк (конкатенация)
				_tcscat_s(file_name, &wfd.cFileName[0]); //путь\\файл

				HANDLE file = CreateFile(file_name, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
				int size = GetFileSize(file, NULL);
				CloseHandle(file);

				if (size != 0)
				{
					if ((wfd.cFileName[0] != (TCHAR)".") && (wfd.cFileName[0] != (TCHAR)".."))
					{
						TCHAR zero_postfix[BUFFER_SIZE] = _T("zero");
						TCHAR empty_file_number[BUFFER_SIZE] = _T("");

						_itot_s(empty_files_counter, empty_file_number, 10); //в символы в 10-ой сс

						TCHAR new_file_name[BUFFER_SIZE] = _T("");

						_tcscat_s(new_file_name, DIRECTORY_NAME); //путь
						_tcscat_s(new_file_name, zero_postfix); //путь + постфикс
						_tcscat_s(new_file_name, empty_file_number); //значение
						_tcscat_s(new_file_name, _T(".txt")); //расширение

						if (MoveFile(file_name, new_file_name)); //типа переименовывает
						else
						{
							cout << "ошибка" << endl;
						}

						empty_files_counter++;
					}
				}
			}
		}
	} while (FindNextFile(directory_handle, &wfd) != NULL);
	FindClose(directory_handle);
	return 0;
}